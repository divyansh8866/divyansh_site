[{"categories":["python"],"content":"Python logging decorator","date":"2023-01-01","objectID":"/python-logging-decorator/","tags":["python"],"title":"Python logging decorator","uri":"/python-logging-decorator/"},{"categories":["python"],"content":"Python logging decorator Here is an example of a Python decorator class that can be used for logging with a specified logging level: To use this decorator, you would need to import the logging module and define a logger for your module or application. Then, you can use the decorator like this: import functools import logging class LoggingDecorator: def __init__(self, logger=None, level = logging.INFO): logging.basicConfig(level=level) self.logger = logger or logging.getLogger(__name__) def __call__(self, func): @functools.wraps(func) def wrapper(*args, **kwargs): self.logger.info(f'Starting {func.__name__}') result = func(*args, **kwargs) self.logger.debug(f'Finished {func.__name__}') return result return wrapper # Use the decorator @LoggingDecorator(level = logging.INFO) def my_function(): print(\"code her\") pass my_function() This will cause the decorated function to log a debug message with the function name and result when it completes execution. The logging level can be specified as an argument to the decorator, so you can use the same decorator class to log at different levels (e.g., logging.INFO, logging.ERROR, etc.). You can also modify the decorator class to accept additional arguments, such as a logger name or a log message format string. ","date":"2023-01-01","objectID":"/python-logging-decorator/:0:0","tags":["python"],"title":"Python logging decorator","uri":"/python-logging-decorator/"},{"categories":["python"],"content":"Set logging level with env","date":"2023-01-01","objectID":"/set-logging-level-with-env/","tags":["python"],"title":"Set logging level with env","uri":"/set-logging-level-with-env/"},{"categories":["python"],"content":"Set logging level with env To set the logging level using an environment variable in Python, you can use the os module to read the value of the environment variable and pass it to the logging.basicConfig function. Here is an example of how you can set the logging level using an environment variable in Python: import logging import os logging_level = os.environ.get('LOGGING_LEVEL', 'INFO') logging.basicConfig(level=logging_level) logging.debug('This is a debug message') logging.info('This is an info message') logging.warning('This is a warning message') logging.error('This is an error message') logging.critical('This is a critical message') In this example, the logging level is set to INFO by default, but it can be overridden by setting the LOGGING_LEVEL environment variable to one of the following values: DEBUG, INFO, WARNING, ERROR, or CRITICAL. For example, to set the logging level to DEBUG, you can set the LOGGING_LEVEL environment variable as follows: export LOGGING_LEVEL=DEBUG You can then run your Python script and it will log messages at the DEBUG level and above. ","date":"2023-01-01","objectID":"/set-logging-level-with-env/:0:0","tags":["python"],"title":"Set logging level with env","uri":"/set-logging-level-with-env/"},{"categories":["serverless"],"content":"Getting started with Serverless","date":"2023-01-01","objectID":"/getting-started-with-serverless/","tags":["serverless","aws"],"title":"Getting started with Serverless","uri":"/getting-started-with-serverless/"},{"categories":["serverless"],"content":"Getting started with serverless To get started with the Serverless Framework and AWS, you will need to do the following: Install the Serverless Framework CLI: To install the Serverless Framework CLI, you will need to have Node.js and npm (the Node.js package manager) installed on your local machine. You can then run the following command to install the Serverless Framework CLI: npminstall-gserverless Set up your AWS credentials: To use the Serverless Framework with AWS, you will need to set up your AWS credentials. You can do this by running the following command: serverlessconfigcredentials--provideraws--keyYOUR_AWS_ACCESS_KEY--secretYOUR_AWS_SECRET_KEY Create a new serverless application: To create a new serverless application, you can run the serverless create command and specify the name of your application and the cloud provider you want to use. For example: serverlesscreate--templateaws-nodejs--pathmy-app This will create a new directory called my-app that contains the basic structure of a serverless application, including a configuration file (serverless.yml) and a sample function (handler.js). Define your functions and events: Next, you will need to define your functions and the events that trigger them in the serverless.yml configuration file. This file is written in YAML and specifies all of the different components of your serverless application, including the functions, events, and resources needed by the application. Here is an example of a simple function that is triggered by an HTTP request: functions:hello:handler:handler.helloevents:- http:path:/method:get This function is defined in the handler.js file and is triggered by an HTTP GET request to the root path (/). Deploy your application: Once you have defined your functions and events, you can deploy your application to AWS by running the serverless deploy command. This will create all of the necessary resources in AWS and deploy your code to the cloud. serverlessdeploy That’s it! You should now have a working serverless application on AWS. You can test your function by sending an HTTP request to the URL provided by the Serverless Framework after the deployment is complete. Reference Serverless website ","date":"2023-01-01","objectID":"/getting-started-with-serverless/:0:0","tags":["serverless","aws"],"title":"Getting started with Serverless","uri":"/getting-started-with-serverless/"},{"categories":["documentation"],"content":"Overview and introduction to AWS - Glue","date":"2022-11-19","objectID":"/database/","tags":["AWS","Glue"],"title":"AWS - Glue (Database)","uri":"/database/"},{"categories":["documentation"],"content":"In this section we will be looking at Database in AWS Glue service. Data catalog: Metadata and the structure of the data is stored in Data Catalog. Database: It is used to create or access the database for the sources and targets. Table: Create one or more tables in the database that can be used by the source and target. Database ","date":"2022-11-19","objectID":"/database/:0:0","tags":["AWS","Glue"],"title":"AWS - Glue (Database)","uri":"/database/"},{"categories":["documentation"],"content":"Database Configuration (serverless) ","date":"2022-11-19","objectID":"/database/:1:0","tags":["AWS","Glue"],"title":"AWS - Glue (Database)","uri":"/database/"},{"categories":["documentation"],"content":"Prerequisites Note: Please run this command to set AWS credentials in Serverless framework. serverless config credentials --provider aws --key \u003cKEY\u003e --secret \u003cSECRET_KEY\u003e -o Following should be added in to .env file in same directory as serverless.yml file. SERVICE_NAME=glue-database Name Required : Name of the database. Location Optional: Uniform resource identifier (uri) of data catlog which can be used by client. Description Optional: Description of the database. Serverless Code service:${env:SERVICE_NAME}frameworkVersion:'3'useDotenv:trueprovider:name:awsresources:# CloudFormation template syntaxResources:GlueDatabase:Type:AWS::Glue::DatabaseProperties:CatalogId:${aws:accountId}# serverless inbuild ENV variableDatabaseInput:Description:\"description here\"# LocationUri: String #OptionalName:test_databavse Command to run serverless file (please run from same directory as serverless.yml) serverless deploy Tip Change serverless to sls in windows path variables to make deployment command easier. Tables The metadata definition for the data in a data store is a table in the AWS Glue Data Catalog. You can manually create a table in the AWS Glue console or generate a table when you run a crawler. The values of your table’s metadata are shown in the Tables list in the AWS Glue console. When you develop ETL (extract, transform, and load) jobs, you use table definitions to identify sources and targets. ","date":"2022-11-19","objectID":"/database/:1:1","tags":["AWS","Glue"],"title":"AWS - Glue (Database)","uri":"/database/"},{"categories":["documentation"],"content":"Tables Configuration (serverless) Serverless Code service:${env:SERVICE_NAME}frameworkVersion:'3'useDotenv:trueprovider:name:awsresources:# CloudFormation template syntaxResources:GlueTable:Type:AWS::Glue::TableProperties:CatalogId:${aws:accountId}# Serverless inbuild ENV variableDatabaseName:String# Name of the database if already exists.TableInput:Description:String# Description of the tableName:String# Name of the tableOwner:String# The table owner. Included for Apache Hive compatibility. Parameters:Json# Key value pair defining table schemaPartitionKeys:# A list of columns by which the table is partitioned. - ColumnRetention:Integer# Retentation time for this tableStorageDescriptor:# Information regarding physical storage of this table.StorageDescriptorTableType:String# Two types are EXTERNAL_TABLE, GOVERNED.TargetTable:TableIdentifierViewExpandedText:String# Included for Apache Hive compatibility. ViewOriginalText:String# Included for Apache Hive compatibility. Tip If the Data source is in another account, you might need to give cross account permission. Reference AWS Cloud Formation ","date":"2022-11-19","objectID":"/database/:2:0","tags":["AWS","Glue"],"title":"AWS - Glue (Database)","uri":"/database/"},{"categories":["documentation"],"content":"Overview and introduction to AWS - Glue","date":"2022-11-16","objectID":"/introduction/","tags":["AWS","Glue"],"title":"AWS - Glue (Introduction)","uri":"/introduction/"},{"categories":["documentation"],"content":"AWS Glue (Introduction) AWS Glue is a fully managed ETL (Extract Transform and Load) service offered by AWS on cloud. AWS is powerfull tool as it is based on distrubuted framework. AWS Glue consists of three major components as shown below. Meta Data Repository : Meta data repo will not store raw datas in it but instead it stores schema and other metadata related to the structure of data which is stored in Databases such as S3, DynamoDB etc. For example : ETL Engine : ETL engine is used for Extracting data from a source and perform different types of transform function on data and finaly load data into data warehouse or any database as per preferance. Flexible scheduler : This allows ETL jobs to be scheduled on CRON. ","date":"2022-11-16","objectID":"/introduction/:0:0","tags":["AWS","Glue"],"title":"AWS - Glue (Introduction)","uri":"/introduction/"},{"categories":["documentation"],"content":"AWS Glue services There are many different services under AWS Glue. Naming and ordering of services might change in future. Data Catalog Databases Tables Stream schema registries Schemas Connections Crawlers Classifiers Catalog settings Data Integration and ETL AWS Glue Studio Jobs Interactive Sessions Notebooks Data classification tools Sensitive data detection Record Matching Triggers Workflows Blueprints Security configurations Reference AWS Glue Official Documentation ","date":"2022-11-16","objectID":"/introduction/:1:0","tags":["AWS","Glue"],"title":"AWS - Glue (Introduction)","uri":"/introduction/"},{"categories":["Python"],"content":"This post will show you on how to create stand alone .exe file from .py file","date":"2022-10-22","objectID":"/python-to-exe-file/","tags":["python","pyinstaller","pip"],"title":"Python - Create .exe from .py file","uri":"/python-to-exe-file/"},{"categories":["Python"],"content":"Create .exe from .py python pyinstaller Developer : Divyansh Patel ","date":"2022-10-22","objectID":"/python-to-exe-file/:0:0","tags":["python","pyinstaller","pip"],"title":"Python - Create .exe from .py file","uri":"/python-to-exe-file/"},{"categories":["Python"],"content":"Requirements Install python package : pyinstaller Note : be sure to use pip / pip3 based on your pip version. pip install pyinstaller ","date":"2022-10-22","objectID":"/python-to-exe-file/:1:0","tags":["python","pyinstaller","pip"],"title":"Python - Create .exe from .py file","uri":"/python-to-exe-file/"},{"categories":["Python"],"content":"Method ","date":"2022-10-22","objectID":"/python-to-exe-file/:2:0","tags":["python","pyinstaller","pip"],"title":"Python - Create .exe from .py file","uri":"/python-to-exe-file/"},{"categories":["Python"],"content":"Step 1 : Navigate in CMD to the directory where your .py file is residing which is to be converted to .exe. ","date":"2022-10-22","objectID":"/python-to-exe-file/:2:1","tags":["python","pyinstaller","pip"],"title":"Python - Create .exe from .py file","uri":"/python-to-exe-file/"},{"categories":["Python"],"content":"Step 2 : Use following command and execute in the same directory where your python file is present. Note : Please replace file_name with your file name. pyinstaller --onefile \u003cfile_name\u003e.py ","date":"2022-10-22","objectID":"/python-to-exe-file/:2:2","tags":["python","pyinstaller","pip"],"title":"Python - Create .exe from .py file","uri":"/python-to-exe-file/"},{"categories":["Python"],"content":"Step 3 : You will see additional files generated, To find the executable file, open the dist folder. ","date":"2022-10-22","objectID":"/python-to-exe-file/:2:3","tags":["python","pyinstaller","pip"],"title":"Python - Create .exe from .py file","uri":"/python-to-exe-file/"},{"categories":["Python"],"content":"Now you have stand alone executable file. Enjoy… Reference pyinstaller website pip package ","date":"2022-10-22","objectID":"/python-to-exe-file/:3:0","tags":["python","pyinstaller","pip"],"title":"Python - Create .exe from .py file","uri":"/python-to-exe-file/"},{"categories":["Python"],"content":"Python error handling decorator","date":"2022-10-22","objectID":"/python-error-handling-decorator/","tags":["python"],"title":"Python error handling decorator","uri":"/python-error-handling-decorator/"},{"categories":["Python"],"content":"Python error handling decorator This decorator will catch any exceptions that occur when the decorated function (divide in this case) is called, and will handle the error by printing a message to the console. You can modify the decorator to handle the error in any way you like. For example, you might want to log the error, or return a default value instead of raising an exception. import functools def handle_errors(func): @functools.wraps(func) def wrapper(*args, **kwargs): try: return func(*args, **kwargs) except Exception as e: # Handle the error here print(f'An error occurred: {e}') return wrapper @handle_errors def divide(a, b): return a / b divide(1, 0) # An error occurred: division by zero ","date":"2022-10-22","objectID":"/python-error-handling-decorator/:0:0","tags":["python"],"title":"Python error handling decorator","uri":"/python-error-handling-decorator/"},{"categories":null,"content":"About LoveIt","date":"2022-10-22","objectID":"/about/","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":" I’m living the dream. I’ve always been a great problem solver, an independent introvert, and a technophile obsessed with the latest devices. Today, I’m working from home as a software developer for JobTarget, Inc., and I get to show off all these elements of who I am. I started learning to code when I was a teenager, though it was always more of a hobby than a career focus. After a college education in Engineering, and continuing to pursue that hobby, I realized Computer Science was the right field for me. Since then, I’ve worked on countless freelance projects and have been involved with a handful of notable startups. Today, I’m working as a junior developer with the amazing team at JobTarget, Inc., and am getting into Cloud and data science on my own time. I’m familiar with a variety of programming languages and technologies, including Python, C, C++, SQL, AWS, Serverless Framework but I’m always adding new skills to my repertoire. I’m also eager to meet other software engineers in the area, so feel free to connect! Certifications ","date":"2022-10-22","objectID":"/about/:0:0","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":"LinkedIn Learning ","date":"2022-10-22","objectID":"/about/:1:0","tags":null,"title":"About Me","uri":"/about/"},{"categories":null,"content":"divyansh_site_content ","date":"0001-01-01","objectID":"/readme/:0:0","tags":null,"title":"","uri":"/readme/"}]